import time
import random
import asyncio
import logging

import pyrogram
from pyrogram import Client, filters, emoji
from pyrogram.types import KeyboardButton, ReplyKeyboardMarkup
from pyrogram.types import Message

import config
import operator



api_id = config.API_ID
api_hash = config.API_HASH
bot_token = config.BOT_TOKEN

app = Client("my_account", api_id = api_id, api_hash = api_hash, bot_token = bot_token)

back_button = KeyboardButton(f"{emoji.BACK_ARROW} Back")
start_button = KeyboardButton(f"Start")

main_keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [back_button],
            [start_button]
        ],
        resize_keyboard=True,
)

def button_filter(button: KeyboardButton):
    async def func(_, __, message: Message):
        return message.text == button.text

    return filters.create(func, "ButtonFilter", button=button)

@app.on_message(filters=filters.command("calc"))
async def calc_command(Client, message):
    ops = {
            "+": operator.add, "-": operator.sub,
            "*": operator.mul, "/": operator.truediv,
    }

    if len(message.command) != 4:
        return await message.reply("Wrong amount of arguments!")

    _, left, op, right = message.command
    op = ops.get(op)
    if op is None:
        return await message.reply("Unknown operator")
    if not left.isdigit() or not right.isdigit():
        return await message.reply("Arguments must be numbers")

    left, right = int(left), int(right)
    await message.reply(f"Result: {op(left, right)}")

@app.on_message(filters=filters.command("start") | button_filter(start_button))
async def test(client, message):
    await message.reply("Hello, user!", reply_markup=keyboard.main_keyboard)
    print("Hello, user!")

@app.on_message(filters=filters.command("time"))
async def test(client, message):
    current_time = time.strftime("%I:%M:%S")
    await message.reply(f"Current time: {current_time}")

@app.on_message(filters.text & filters.private)
async def echo(client, message):
    text = message.text
    if random.choice([True, False]):
        print(text)
        await message.reply(text)
    else:
        print(text[::-1])
        await message.reply(text[::-1])

@app.on_message()
async def test(client, message):
    await message.reply("test")

app.run()
